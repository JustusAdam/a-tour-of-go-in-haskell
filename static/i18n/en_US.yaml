test:
  message: Hello

goroutines:
  first: "Haskell has a lightweight thread feature as in Go."
  inter: "starts a new lightweight thread running"
  overviewPreAsync:
    '<code>async :: IO a -> Async a</code> is not a special syntax, but a just function.
    The function <code>async</code> is provided from the '
  overviewPostAsync:
    ' package'
  detailPreBase:
    'Haskell has several tools for communication between different threads.
    Basic tools are provided from the standard '
  detailPostBase:
    ' package.
    Just like Go, we can use channel. (See the next page.)'
  note: ""

channels:
  first:
    'Channel is one-directional tube to flow values.
    Values are appended to the end of channel, then taken from the top of channel.'
  writeChan: "Append v to the end of channel ch"
  readChan: "Take one from the top of channel ch"
  postRW: ""
  preNewChan: "Channel instance must be built before use:"
  postNewChan:
    'Different threads can use one channel simultaneously.
    If a thread try to <code>readChan</code> to empty channel,
    the thread does not raise error, but just be blocked until new value.
    By the behavior, we can fall threads in line with each other.'
  example:
    'The example code makes lightweight threads calculate sum of <code>Int</code> lists.
    The main thread waits results from lightweight threads, then use them.'
  stm:
    ' package provides another implimentation of channel.
    STM will be introduced later.'
