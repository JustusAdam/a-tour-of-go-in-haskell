test:
  message: こんにちは

goroutines:
  first: "Haskell は Go と同じく軽量スレッドの機能を持っています。"
  inter: "これは新しい軽量スレッドを作り、その中で次の処理を起動します。"
  overviewPreAsync:
    '<code>async :: IO a -> Async a</code> は何か特殊な構文というわけではなく通常の関数です。
    <code>async</code> 関数は '
  overviewPostAsync:
    ' パッケージで提供されています。'
  detailPreBase:
    'Haskell には複数のスレッドの間で値をやりとりするための道具がいくつかあります。
    基本的な道具は標準の '
  detailPostBase:
    ' パッケージによって提供されています。
    ちょうど Go のように、チャネルを使うこともできます(次のページ)。'
  note: ""

channels:
  first:
    'チャネルは値が一方向にだけ流れる管です。
    値はチャネルの末尾に追加され、先頭から取り出さます。'
  writeChan: "v をチャネル ch の末尾に追加する"
  readChan: "チャネル ch の先頭から値を取り出す"
  postRW: ""
  preNewChan: "チャネルは使う前に作っておく必要があります。"
  postNewChan:
    'ひとつのチャネルへの書き込みと読み出しは異なる複数のスレッドから行うことができます。
    もしチャネルが空のときに <code>readChan</code> しようとしても、
    それはエラーにはならず、単に値が来るまで停止(ブロック)します。
    この挙動によって複数のスレッドの歩調を合わせることができます。'
  example:
    'サンプルコードは軽量スレッドに <code>Int</code> リストの合計を計算させています。
    軽量スレッドの計算結果が出揃うのを待ち、メインスレッドでそれらを使います。'
  stm:
    ' パッケージは別のチャネル実装を提供します。stm については後ほど説明します。
    今は stm を実行するには <code>atomically</code> 関数を使うとだけ覚えておいてください。'

bufferedChannels:
  first: " パッケージでサイズを制限したチャネルを作ることができます。"
  post:
    '満杯のチャネルへの <code>writeChan</code> はブロックされます。
    チャネルのサイズを制限することで、
    チャネルの下流のスレッドによる消費が追い付かない速度で上流のスレッドが値を作り出すのを抑止できます。'
  stm: ' パッケージにも <code>TBQueue</code> という制限付きチャネルがあります。'

rangeAndClose:
  first:
    'Go の <code>range</code> と <code>close</code> に直接相当するものは
    Haskell にはありませんが、必要であれば簡単に用意することができます。'
  range:
    'Go の for 式とともに使う <code>range</code> 句は、
    チャネルの要素を(ちょうど配列のように)反復処理したいときに役立ちます。
    Haskell の <code>getChanContents :: Chan a -> IO [a]</code>
    はチャネルをリストに変換するので同じようなことができます。'
  close:
    'Go の組み込み関数 <code>close</code> はチャネルにこれ以上値が送られないことをマークします。
    <code>close</code> を Haskell で簡単に再現するには <code>Maybe</code> を使い、
    最後の値として <code>Nothing</code> を送るようにすればよいでしょう。
    ただしこれはごく簡単な方法なので、すでに <code>Nothing</code>
    を送ったチャネルに更に値が送られたときエラーを起こすことはできません。
    そこは少し注意が必要です。'
  list:
    '余談ですが、Haskell では右のサンプルコードのようなことがやりたいときにはリストを使う方が素直な書き方になるでしょう。
    リスト版も載せておきます。'

select:
  first:
    'Go の <code>select</code> に直接相当するものは
    Haskell にはありませんが、必要であれば簡単に用意することができます。'
  preStm:
    'Go の <code>select</code> は複数の送信・受信命令のうち、どれか実行可能なものを1つ実行します。'
  postStm:
    ' パッケージの <code>orElse :: STM a -> STM a -> STM a</code> 関数は2つの STM 命令のうち実行できるものを実行します。
    Haskell で2引数関数をリストに拡張するには <code>fold</code> 系の関数を使えば簡単にできます。
    この実装の注意点として、複数の命令が実行可能な場合は Go のようにランダムセレクトされるのではなく、
    リストの先頭に近いものが優先されます。
    また、リスト中の STM 命令の戻り値の型はすべて同じである必要があります。'
  preMsum:
    '実は <code>STM</code> 型は <code>MonadPlus</code> クラスのインスタンスなので
    <code>select</code> は以下のように書くこともできます。'
  postMsum:
    '<code>STM</code> 型の <code>MonadPlus</code> の実装が
    <code>orElse</code> で書かれているのでこの書き方ができます。
    ただし <code>MonadPlus</code> の実装が <code>orElse</code>
    であることはドキュメントに明示的に書かれているわけではないので、
    この書き方は注意が必要かも知れません。'

defaultSelection:
  first:
    'Go の <code>select</code> は、実行可能な通信が他にないときに実行されるデフォルトの分岐を持つことができます。
    デフォルトの分岐によってブロックしない <code>select</code> を書くことができます。'
  preCode:
    '私たちの Haskell 版 <code>select</code> ではリストの最後で単に <code>return</code> すれば同じことができます。'
  tickAfter:
    '右のサンプルコードでは Go の<code>time.Tick</code>および<code>time.After</code>にあたる関数も作っています。'

equivalentBinaryTrees1:
  first:
    '二分木は同じ要素を持っていても異なる形状になり得ます。たとえば以下の2つの二分木は同じ要素を保持しています。'
  function:
    'これまで見てきた並行性のテクニックを用いて、異なる形状の2つの二分木が同じ要素を保持するかチェックする関数を作ってみましょう。'
  tree:
    '二分木の抽象データ型は以下のものを使います。'
  next:
    '次のページに続きます。'

        # p_ $ at "implementWalk"
        # p_ $ at "testWalk"
        # p_ $ at "newTree"
        # pre_ $ code_ $ toHtmlRaw $ T.unlines
        #   [ "tree1 <- newTree 1"
        #   , "async $ walk tree1 ch"
        #   ]
        # p_ $ at "printTree"
        # p_ $ at "implementSame"
        # p_ $ at "testSame"
        # p_ $ at "link"


equivalentBinaryTrees2:
  implementWalk: '<code>walk</code> を実装しましょう。'
  testWalk: '<code>walk</code> をテストしましょう。'
  newTree:
    '関数 <code>newTree :: Int -> IO Tree</code> は引数 <code>k::Int</code> をもとに
    <code>k,2k,3k,..,10k</code> の要素を持つランダムな二分木を構築します。
    新しい二分木を作って <code>walk</code> を実行するには以下のようにします。'
  printTree: 'チャネルから値を読んでプリントすると <code>1,2,3,...,10</code> と表示されるべきです。'
  implementSame: '<code>walk</code> を使って <code>same</code> を実装しましょう。'
  testSame:
    "<code>same</code>をテストしましょう。<br/>
    <code>t1<-newTree 1; t1'<-newTree 1; same t1 t1'</code> は <code>True</code> を返し、<br/>
    <code>t1<-newTree 1; t2'<-newTree 2; same t1 t2</code> は <code>False</code> を返すべきです。"
  link:
    '実際の <code>Tree</code> や <code>newTree</code> の実装は
    <a href="https://github.com/syocy/a-tour-of-go-in-haskell/blob/master/src/A_Tour_of_Go/Concurrency/Tree.hs">こちら</a>、
    解答例は
    <a href="https://github.com/syocy/a-tour-of-go-in-haskell/blob/master/src/A_Tour_of_Go/Concurrency/EquivalentBinaryTrees.hs">こちら</a>
    にあります。'
  pure:
    '(余談: A Tour of Go では、Go はチャネルがあることによって多くの他の言語よりこのアルゴリズムを記述しやすいと主張されていますが、
    Haskell の場合は純粋なリストを使うことでチャネルを使うよりシンプルに書けます。
    右のコードの後半にリストによる実装を示します。)'

syncMutex:
  first:
    'これまでチャネルが軽量スレッド間の通信に便利なツールであることを見てきました。
    しかしチャネルで解決できない (あるいは解決が難しい) 別のユースケースもあります。
    たとえばスレッドどうしで変数を共有してコンフリクトを起こさずにお互いが書き換える場合です。'
  mutex:
    'Go はそういった問題に対して古典的な Mutex を提供しています。
    Haskell では STM の道具箱に入っている <code>TVar</code> が使えます。
    <code>TVar</code> の方が Mutex より直接的に問題を解決できます。
    使い方は <code>TQueue</code> とよく似ています。'
  sample:
    '右のサンプルコードでは <code>TVar</code> を使って複数のスレッドから安全に更新可能なカウンターを構築しています。
    STM の <code>atomically</code> は <strong>トランザクション</strong> (割り込むことのできない処理) を作るので、
    カウンターの更新がコンフリクトを起こすことはありません。'
